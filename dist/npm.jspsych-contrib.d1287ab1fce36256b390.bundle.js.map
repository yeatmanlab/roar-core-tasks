{"version":3,"file":"npm.jspsych-contrib.d1287ab1fce36256b390.bundle.js","mappings":"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","sources":["webpack://@bdelab/roar-levantecore-tasks/./node_modules/@jspsych-contrib/plugin-audio-multi-response/dist/index.js","webpack://@bdelab/roar-levantecore-tasks/./node_modules/@jspsych-contrib/plugin-corsi-blocks/dist/index.js","webpack://@bdelab/roar-levantecore-tasks/./node_modules/@jspsych-contrib/plugin-html-multi-response/dist/index.js"],"sourcesContent":["import { ParameterType } from 'jspsych';\n\nconst info = {\r\n    name: \"audio-multi-response\",\r\n    parameters: {\r\n        /** The HTML string to be displayed. */\r\n        stimulus: {\r\n            type: ParameterType.HTML_STRING,\r\n            pretty_name: \"Stimulus\",\r\n            default: undefined,\r\n        },\r\n        /** Array containing the label(s) for the button(s). */\r\n        button_choices: {\r\n            type: ParameterType.STRING,\r\n            pretty_name: \"Button Choices\",\r\n            default: [],\r\n            array: true,\r\n        },\r\n        /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\r\n        keyboard_choices: {\r\n            type: ParameterType.KEYS,\r\n            pretty_name: \"Keyboard Choices\",\r\n            default: \"NO_KEYS\",\r\n        },\r\n        /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\r\n        button_html: {\r\n            type: ParameterType.HTML_STRING,\r\n            pretty_name: \"Button HTML\",\r\n            default: '<button class=\"jspsych-btn\">%choice%</button>',\r\n            array: true,\r\n        },\r\n        /** Any content here will be displayed below the stimulus. */\r\n        prompt: {\r\n            type: ParameterType.HTML_STRING,\r\n            pretty_name: \"Prompt\",\r\n            default: null,\r\n        },\r\n        /** Whether to display the prompt above the buttons. */\r\n        prompt_above_buttons: {\r\n            type: ParameterType.BOOL,\r\n            pretty_name: \"Prompt above buttons\",\r\n            default: false,\r\n        },\r\n        /** How long to show trial before it ends. */\r\n        trial_duration: {\r\n            type: ParameterType.INT,\r\n            pretty_name: \"Trial duration\",\r\n            default: null,\r\n        },\r\n        /** The vertical margin of the button. */\r\n        margin_vertical: {\r\n            type: ParameterType.STRING,\r\n            pretty_name: \"Margin vertical\",\r\n            default: \"0px\",\r\n        },\r\n        /** The horizontal margin of the button. */\r\n        margin_horizontal: {\r\n            type: ParameterType.STRING,\r\n            pretty_name: \"Margin horizontal\",\r\n            default: \"8px\",\r\n        },\r\n        /** If true, trial will end when subject makes a response. */\r\n        response_ends_trial: {\r\n            type: ParameterType.BOOL,\r\n            pretty_name: \"Response ends trial\",\r\n            default: true,\r\n        },\r\n        /** If true, then the trial will end as soon as the audio file finishes playing. */\r\n        trial_ends_after_audio: {\r\n            type: ParameterType.BOOL,\r\n            pretty_name: \"Trial ends after audio\",\r\n            default: false,\r\n        },\r\n        /** If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before a response is accepted. */\r\n        response_allowed_while_playing: {\r\n            type: ParameterType.BOOL,\r\n            pretty_name: \"Response allowed while playing\",\r\n            default: true,\r\n        },\r\n    },\r\n};\r\n/**\r\n * **audio-multi-response**\r\n * jsPsych plugin for playing an audio file and getting a button or keyboard response\r\n * @author Adam Richie-Halford\r\n * @see {@link https://www.jspsych.org/plugins/jspsych-audio-multi-response/ audio-multi-response plugin documentation on jspsych.org}\r\n */\r\nclass AudioMultiResponsePlugin {\r\n    constructor(jsPsych) {\r\n        this.jsPsych = jsPsych;\r\n    }\r\n    trial(display_element, trial, on_load) {\r\n        // hold the .resolve() function from the Promise that ends the trial\r\n        let trial_complete;\r\n        // setup stimulus\r\n        var context = this.jsPsych.pluginAPI.audioContext();\r\n        // store response\r\n        let response = {\r\n            rt: null,\r\n            key: null,\r\n            button: null,\r\n            source: null,\r\n        };\r\n        // record webaudio context start time\r\n        var startTime;\r\n        // load audio file\r\n        this.jsPsych.pluginAPI\r\n            .getAudioBuffer(trial.stimulus)\r\n            .then((buffer) => {\r\n            if (context !== null) {\r\n                this.audio = context.createBufferSource();\r\n                this.audio.buffer = buffer;\r\n                this.audio.connect(context.destination);\r\n            }\r\n            else {\r\n                this.audio = buffer;\r\n                this.audio.currentTime = 0;\r\n            }\r\n            setupTrial();\r\n        })\r\n            .catch((err) => {\r\n            console.error(`Failed to load audio file \"${trial.stimulus}\". Try checking the file path. We recommend using the preload plugin to load audio files.`);\r\n            console.error(err);\r\n        });\r\n        const setupTrial = () => {\r\n            // set up end event if trial needs it\r\n            if (trial.trial_ends_after_audio) {\r\n                this.audio.addEventListener(\"ended\", end_trial);\r\n            }\r\n            // enable buttons after audio ends if necessary\r\n            if (!trial.response_allowed_while_playing && !trial.trial_ends_after_audio) {\r\n                this.audio.addEventListener(\"ended\", setup_keyboard_listener);\r\n                this.audio.addEventListener(\"ended\", enable_buttons);\r\n            }\r\n            //display buttons\r\n            var buttons = [];\r\n            if (Array.isArray(trial.button_html)) {\r\n                if (trial.button_html.length == trial.button_choices.length) {\r\n                    buttons = trial.button_html;\r\n                }\r\n                else {\r\n                    console.error(\"Error in audio-multi-response plugin. The length of the button_html array does not equal the length of the choices array\");\r\n                }\r\n            }\r\n            else {\r\n                for (var i = 0; i < trial.button_choices.length; i++) {\r\n                    buttons.push(trial.button_html);\r\n                }\r\n            }\r\n            let html = '<div id=\"jspsych-audio-multi-response-btngroup\">';\r\n            for (var i = 0; i < trial.button_choices.length; i++) {\r\n                var str = buttons[i].replace(/%choice%/g, trial.button_choices[i]);\r\n                html +=\r\n                    '<div class=\"jspsych-audio-multi-response-button\" style=\"cursor: pointer; display: inline-block; margin:' +\r\n                        trial.margin_vertical +\r\n                        \" \" +\r\n                        trial.margin_horizontal +\r\n                        '\" id=\"jspsych-audio-multi-response-button-' +\r\n                        i +\r\n                        '\" data-choice=\"' +\r\n                        i +\r\n                        '\">' +\r\n                        str +\r\n                        \"</div>\";\r\n            }\r\n            html += \"</div>\";\r\n            //show prompt if there is one\r\n            if (trial.prompt !== null) {\r\n                if (trial.prompt_above_buttons) {\r\n                    html = '<div id=\"jspsych-audio-multi-response-prompt\">' + trial.prompt + \"</div>\" + html;\r\n                }\r\n                else {\r\n                    html += '<div id=\"jspsych-audio-multi-response-prompt\">' + trial.prompt + \"</div>\";\r\n                }\r\n            }\r\n            display_element.innerHTML = html;\r\n            if (trial.response_allowed_while_playing) {\r\n                enable_buttons();\r\n                setup_keyboard_listener();\r\n            }\r\n            else {\r\n                disable_buttons();\r\n            }\r\n            // start time\r\n            startTime = performance.now();\r\n            // start audio\r\n            if (context !== null) {\r\n                startTime = context.currentTime;\r\n                this.audio.start(startTime);\r\n            }\r\n            else {\r\n                this.audio.play();\r\n            }\r\n            // end trial if time limit is set\r\n            if (trial.trial_duration !== null) {\r\n                this.jsPsych.pluginAPI.setTimeout(() => {\r\n                    end_trial();\r\n                }, trial.trial_duration);\r\n            }\r\n            on_load();\r\n        };\r\n        // function to end trial when it is time\r\n        const end_trial = () => {\r\n            // kill any remaining setTimeout handlers\r\n            this.jsPsych.pluginAPI.clearAllTimeouts();\r\n            // stop the audio file if it is playing\r\n            // remove end event listeners if they exist\r\n            if (context !== null) {\r\n                this.audio.stop();\r\n            }\r\n            else {\r\n                this.audio.pause();\r\n            }\r\n            this.audio.removeEventListener(\"ended\", end_trial);\r\n            this.audio.removeEventListener(\"ended\", setup_keyboard_listener);\r\n            this.audio.removeEventListener(\"ended\", enable_buttons);\r\n            // kill keyboard listeners\r\n            this.jsPsych.pluginAPI.cancelAllKeyboardResponses();\r\n            // gather the data to store for the trial\r\n            const trial_data = {\r\n                rt: response.rt,\r\n                stimulus: trial.stimulus,\r\n                keyboard_response: response.key,\r\n                button_response: response.button,\r\n                response_source: response.source,\r\n            };\r\n            // clear the display\r\n            display_element.innerHTML = \"\";\r\n            // move on to the next trial\r\n            this.jsPsych.finishTrial(trial_data);\r\n            trial_complete();\r\n        };\r\n        function button_response(e) {\r\n            var choice = e.currentTarget.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\r\n            after_button_response(choice);\r\n        }\r\n        function disable_buttons() {\r\n            var btns = document.querySelectorAll(\".jspsych-audio-multi-response-button\");\r\n            for (var i = 0; i < btns.length; i++) {\r\n                var btn_el = btns[i].querySelector(\"button\");\r\n                if (btn_el) {\r\n                    btn_el.disabled = true;\r\n                }\r\n                btns[i].removeEventListener(\"click\", button_response);\r\n            }\r\n        }\r\n        function enable_buttons() {\r\n            var btns = document.querySelectorAll(\".jspsych-audio-multi-response-button\");\r\n            for (var i = 0; i < btns.length; i++) {\r\n                var btn_el = btns[i].querySelector(\"button\");\r\n                if (btn_el) {\r\n                    btn_el.disabled = false;\r\n                }\r\n                btns[i].addEventListener(\"click\", button_response);\r\n            }\r\n        }\r\n        // function to handle responses by the subject\r\n        function after_button_response(choice) {\r\n            // measure rt\r\n            var endTime = performance.now();\r\n            var rt = Math.round(endTime - startTime);\r\n            if (context !== null) {\r\n                endTime = context.currentTime;\r\n                rt = Math.round((endTime - startTime) * 1000);\r\n            }\r\n            response.button = parseInt(choice);\r\n            response.rt = rt;\r\n            response.source = \"button\";\r\n            // disable all the buttons after a response\r\n            disable_buttons();\r\n            if (trial.response_ends_trial) {\r\n                end_trial();\r\n            }\r\n        }\r\n        // function to handle keyboard responses by the subject\r\n        const after_keyboard_response = (info) => {\r\n            // only record the first response\r\n            if (response.key == null) {\r\n                response = Object.assign({ source: \"keyboard\", button: null }, info);\r\n            }\r\n            if (trial.response_ends_trial) {\r\n                end_trial();\r\n            }\r\n        };\r\n        const setup_keyboard_listener = () => {\r\n            // start the keyboard response listener\r\n            if (trial.keyboard_choices != \"NO_KEYS\") {\r\n                let responseArgs;\r\n                if (context !== null) {\r\n                    responseArgs = {\r\n                        rt_method: \"audio\",\r\n                        audio_context: context,\r\n                        audio_context_start_time: startTime,\r\n                    };\r\n                }\r\n                else {\r\n                    responseArgs = {\r\n                        rt_method: \"performance\",\r\n                    };\r\n                }\r\n                this.jsPsych.pluginAPI.getKeyboardResponse(Object.assign({ callback_function: after_keyboard_response, valid_responses: trial.keyboard_choices, persist: false, allow_held_key: false }, responseArgs));\r\n            }\r\n        };\r\n        return new Promise((resolve) => {\r\n            trial_complete = resolve;\r\n        });\r\n    }\r\n    simulate(trial, simulation_mode, simulation_options, load_callback) {\r\n        if (simulation_mode == \"data-only\") {\r\n            load_callback();\r\n            this.simulate_data_only(trial, simulation_options);\r\n        }\r\n        if (simulation_mode == \"visual\") {\r\n            this.simulate_visual(trial, simulation_options, load_callback);\r\n        }\r\n    }\r\n    create_simulation_data(trial, simulation_options) {\r\n        const keyboard_data = {\r\n            stimulus: trial.stimulus,\r\n            rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\r\n            keyboard_response: this.jsPsych.pluginAPI.getValidKey(trial.keyboard_choices),\r\n            button_response: null,\r\n            response_source: \"keyboard\",\r\n        };\r\n        const button_data = {\r\n            stimulus: trial.stimulus,\r\n            rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\r\n            button_response: this.jsPsych.randomization.randomInt(0, trial.button_choices.length - 1),\r\n            keyboard_response: null,\r\n            response_source: \"button\",\r\n        };\r\n        const default_data = Math.random() < 0.5 ? keyboard_data : button_data;\r\n        const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\r\n        this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\r\n        return data;\r\n    }\r\n    simulate_data_only(trial, simulation_options) {\r\n        const data = this.create_simulation_data(trial, simulation_options);\r\n        this.jsPsych.finishTrial(data);\r\n    }\r\n    simulate_visual(trial, simulation_options, load_callback) {\r\n        const data = this.create_simulation_data(trial, simulation_options);\r\n        const display_element = this.jsPsych.getDisplayElement();\r\n        const respond = () => {\r\n            if (data.rt !== null) {\r\n                if (data.button_response !== null) {\r\n                    this.jsPsych.pluginAPI.clickTarget(display_element.querySelector(`div[data-choice=\"${data.response}\"] button`), data.rt);\r\n                }\r\n                else {\r\n                    this.jsPsych.pluginAPI.pressKey(data.keyboard_response, data.rt);\r\n                }\r\n            }\r\n        };\r\n        this.trial(display_element, trial, () => {\r\n            load_callback();\r\n            if (!trial.response_allowed_while_playing) {\r\n                this.audio.addEventListener(\"ended\", respond);\r\n            }\r\n            else {\r\n                respond();\r\n            }\r\n        });\r\n    }\r\n}\r\nAudioMultiResponsePlugin.info = info;\n\nexport { AudioMultiResponsePlugin as default };\n//# sourceMappingURL=index.js.map\n","import { ParameterType } from 'jspsych';\n\nconst info = {\r\n    name: \"corsi-blocks\",\r\n    parameters: {\r\n        /**\r\n         * An array of block indexes that specify the order of the sequence to be displayed. For example,\r\n         * [0, 1, 2, 3, 4] would display the first 5 blocks in the order they appear in the blocks parameter.\r\n         */\r\n        sequence: {\r\n            type: ParameterType.INT,\r\n            default: undefined,\r\n            array: true,\r\n        },\r\n        /**\r\n         * An array of objects that specify the x and y coordinates of each block. The coordinates represent the center\r\n         * of the block. The coordinates are specified as percentages of the width and height of the display. For example,\r\n         * {x: 50, y: 50} would place the block in the center of the display.\r\n         *\r\n         * The default value is an array of nine blocks that approximates the layout of the original Corsi blocks task.\r\n         */\r\n        blocks: {\r\n            type: ParameterType.COMPLEX,\r\n            array: true,\r\n            default: [\r\n                { y: 80, x: 45 },\r\n                { y: 94, x: 80 },\r\n                { y: 70, x: 20 },\r\n                { y: 60, x: 70 },\r\n                { y: 50, x: 35 },\r\n                { y: 40, x: 6 },\r\n                { y: 45, x: 94 },\r\n                { y: 25, x: 60 },\r\n                { y: 6, x: 47 },\r\n            ],\r\n            nested: {\r\n                x: {\r\n                    type: ParameterType.INT,\r\n                    default: undefined,\r\n                },\r\n                y: {\r\n                    type: ParameterType.INT,\r\n                    default: undefined,\r\n                },\r\n            },\r\n        },\r\n        /**\r\n         * The size of the blocks as a percentage of the overall display size.\r\n         */\r\n        block_size: {\r\n            type: ParameterType.INT,\r\n            default: 12,\r\n        },\r\n        /**\r\n         * The width of the display, specified as a valid CSS measurement.\r\n         */\r\n        display_width: {\r\n            type: ParameterType.STRING,\r\n            default: \"400px\",\r\n        },\r\n        /**\r\n         * The height of the display, specified as a valid CSS measurement.\r\n         */\r\n        display_height: {\r\n            type: ParameterType.STRING,\r\n            default: \"400px\",\r\n        },\r\n        /**\r\n         * An optional text prompt that can be shown below the display area.\r\n         */\r\n        prompt: {\r\n            type: ParameterType.STRING,\r\n            default: null,\r\n        },\r\n        /**\r\n         * The mode of the trial. If 'display', then the sequence is displayed and the trial ends after\r\n         * the sequence is complete. If 'input', then the use must click on the blocks in the correct order.\r\n         */\r\n        mode: {\r\n            type: ParameterType.STRING,\r\n            default: \"display\",\r\n            options: [\"display\", \"input\"],\r\n        },\r\n        /**\r\n         * The duration, in milliseconds, between each block in the sequence.\r\n         */\r\n        sequence_gap_duration: {\r\n            type: ParameterType.INT,\r\n            default: 250,\r\n        },\r\n        /**\r\n         * The duration, in milliseconds, that each block is displayed during the sequence.\r\n         */\r\n        sequence_block_duration: {\r\n            type: ParameterType.INT,\r\n            default: 1000,\r\n        },\r\n        /**\r\n         * The duration, in milliseconds, to show the blocks before the sequence begins.\r\n         */\r\n        pre_stim_duration: {\r\n            type: ParameterType.INT,\r\n            default: 500,\r\n        },\r\n        /**\r\n         * The duration, in milliseconds, to show the feedback response animation\r\n         * during input mode.\r\n         */\r\n        response_animation_duration: {\r\n            type: ParameterType.INT,\r\n            default: 500,\r\n        },\r\n        /**\r\n         * The color of unselected, unhighlighted blocks.\r\n         */\r\n        block_color: {\r\n            type: ParameterType.STRING,\r\n            default: \"#555\",\r\n        },\r\n        /**\r\n         * The color of the highlighted block.\r\n         */\r\n        highlight_color: {\r\n            type: ParameterType.STRING,\r\n            default: \"#ff0000\",\r\n        },\r\n        /**\r\n         * The color of correct feedback.\r\n         */\r\n        correct_color: {\r\n            type: ParameterType.STRING,\r\n            default: \"#00ff00\",\r\n        },\r\n        /**\r\n         * The color of incorrect feedback.\r\n         */\r\n        incorrect_color: {\r\n            type: ParameterType.STRING,\r\n            default: \"#ff0000\",\r\n        },\r\n    },\r\n};\r\n/**\r\n * **corsi-blocks**\r\n *\r\n * This plugin displays a sequence of blocks and then gets the\r\n * subject's response. The sequence can be displayed in either\r\n * 'display' mode or 'input' mode. In 'display' mode, the\r\n * sequence is displayed and the trial ends after the sequence\r\n * is complete. In 'input' mode, the subject must click on the\r\n * blocks in the correct order.\r\n *\r\n * @author Josh de Leeuw\r\n * @see {@link https://DOCUMENTATION_URL DOCUMENTATION LINK TEXT}\r\n */\r\nclass CorsiBlocksPlugin {\r\n    constructor(jsPsych) {\r\n        this.jsPsych = jsPsych;\r\n    }\r\n    trial(display_element, trial) {\r\n        let css = `<style id=\"jspsych-corsi-css\">\n      #jspsych-corsi-stimulus { \n        position: relative; \n        width:${trial.display_width}; \n        height:${trial.display_height};\n      }\n      .jspsych-corsi-block { \n        background-color: ${trial.block_color}; \n        position: absolute; \n        width: ${trial.block_size}%; \n        height: ${trial.block_size}%;\n        transform: translate(-50%, -50%);\n      }\n      #jspsych-corsi-prompt { \n        position: absolute; \n        text-align: center; \n        width: ${trial.display_width}; \n        top: 100%; \n      }\n      #jspsych-corsi-prompt p { \n        font-size: 18px; \n      }\n      ${trial.mode == \"input\" ? \".jspsych-corsi-block { cursor: pointer; }\" : \"\"}\n    </style>`;\r\n        let html = css;\r\n        html += '<div id=\"jspsych-corsi-stimulus\">';\r\n        for (let i = 0; i < trial.blocks.length; i++) {\r\n            html += `<div class=\"jspsych-corsi-block\" data-id=\"${i}\" style=\"top:${trial.blocks[i].y}%; left:${trial.blocks[i].x}%;\"></div>`;\r\n        }\r\n        if (trial.prompt != null) {\r\n            html += `<div id=\"jspsych-corsi-prompt\"><p>${trial.prompt}</p></div>`;\r\n        }\r\n        html += \"</div>\";\r\n        display_element.innerHTML = html;\r\n        const start_time = performance.now();\r\n        const trial_data = {\r\n            sequence: trial.sequence,\r\n            response: [],\r\n            rt: [],\r\n            blocks: trial.blocks,\r\n            correct: null,\r\n        };\r\n        const end_trial = () => {\r\n            display_element.innerHTML = \"\";\r\n            this.jsPsych.finishTrial(trial_data);\r\n        };\r\n        const wait = function (fn, t) {\r\n            const start = performance.now();\r\n            const _wait_help = (fn, t, s) => {\r\n                const duration = performance.now() - s;\r\n                if (duration >= t) {\r\n                    fn();\r\n                }\r\n                else {\r\n                    window.requestAnimationFrame(() => _wait_help(fn, t, start));\r\n                }\r\n            };\r\n            window.requestAnimationFrame(() => _wait_help(fn, t, start));\r\n        };\r\n        if (trial.mode == \"display\") {\r\n            let sequence_location = 0;\r\n            let display_phase = \"pre-stim\";\r\n            const update_display = () => {\r\n                if (display_phase == \"pre-stim\") {\r\n                    wait(update_display, trial.pre_stim_duration);\r\n                    display_phase = \"sequence\";\r\n                }\r\n                else if (display_phase == \"sequence\") {\r\n                    const block = display_element.querySelector(`.jspsych-corsi-block[data-id=\"${trial.sequence[sequence_location]}\"]`);\r\n                    if (sequence_location < trial.sequence.length) {\r\n                        block.style.backgroundColor = trial.highlight_color;\r\n                        wait(update_display, trial.sequence_block_duration);\r\n                        display_phase = \"iti\";\r\n                    }\r\n                    if (sequence_location == trial.sequence.length) {\r\n                        end_trial();\r\n                    }\r\n                }\r\n                else if (display_phase == \"iti\") {\r\n                    const block = display_element.querySelector(`.jspsych-corsi-block[data-id=\"${trial.sequence[sequence_location]}\"]`);\r\n                    block.style.backgroundColor = trial.block_color;\r\n                    sequence_location++;\r\n                    wait(update_display, trial.sequence_gap_duration);\r\n                    display_phase = \"sequence\";\r\n                }\r\n            };\r\n            window.requestAnimationFrame(update_display);\r\n        }\r\n        if (trial.mode == \"input\") {\r\n            const correct_animation = [\r\n                { backgroundColor: trial.block_color },\r\n                { backgroundColor: trial.correct_color, offset: 0.2 },\r\n                { backgroundColor: trial.block_color },\r\n            ];\r\n            const incorrect_animation = [\r\n                { backgroundColor: trial.block_color },\r\n                { backgroundColor: trial.incorrect_color, offset: 0.2 },\r\n                { backgroundColor: trial.block_color },\r\n            ];\r\n            const animation_timing = {\r\n                duration: trial.response_animation_duration,\r\n                iterations: 1,\r\n            };\r\n            const register_click = (id) => {\r\n                if (trial_data.correct !== null) {\r\n                    return; // extra click during timeout, do nothing\r\n                }\r\n                const rt = Math.round(performance.now() - start_time);\r\n                trial_data.response.push(parseInt(id));\r\n                trial_data.rt.push(rt);\r\n                const correct = parseInt(id) == trial.sequence[trial_data.response.length - 1];\r\n                if (correct) {\r\n                    display_element\r\n                        .querySelector(`.jspsych-corsi-block[data-id=\"${id}\"]`)\r\n                        .animate(correct_animation, animation_timing);\r\n                    if (trial_data.response.length == trial.sequence.length) {\r\n                        trial_data.correct = true;\r\n                        setTimeout(end_trial, trial.response_animation_duration); // allows animation to finish\r\n                    }\r\n                }\r\n                else {\r\n                    display_element\r\n                        .querySelector(`.jspsych-corsi-block[data-id=\"${id}\"]`)\r\n                        .animate(incorrect_animation, animation_timing);\r\n                    trial_data.correct = false;\r\n                    setTimeout(end_trial, trial.response_animation_duration); // allows animation to finish\r\n                }\r\n            };\r\n            var blocks = display_element.querySelectorAll(\".jspsych-corsi-block\");\r\n            for (var i = 0; i < blocks.length; i++) {\r\n                blocks[i].addEventListener(\"click\", (e) => {\r\n                    register_click(e.target.getAttribute(\"data-id\"));\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\nCorsiBlocksPlugin.info = info;\n\nexport { CorsiBlocksPlugin as default };\n//# sourceMappingURL=index.js.map\n","import { ParameterType } from 'jspsych';\n\nconst info = {\r\n    name: \"html-multi-response\",\r\n    parameters: {\r\n        /** The HTML string to be displayed */\r\n        stimulus: {\r\n            type: ParameterType.HTML_STRING,\r\n            pretty_name: \"Stimulus\",\r\n            default: undefined,\r\n        },\r\n        /** Array containing the label(s) for the button(s). */\r\n        button_choices: {\r\n            type: ParameterType.STRING,\r\n            pretty_name: \"Button Choices\",\r\n            default: [],\r\n            array: true,\r\n        },\r\n        /**\r\n         * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\r\n         */\r\n        keyboard_choices: {\r\n            type: ParameterType.KEYS,\r\n            pretty_name: \"Keyboard Choices\",\r\n            default: \"NO_KEYS\",\r\n        },\r\n        /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\r\n        button_html: {\r\n            type: ParameterType.HTML_STRING,\r\n            pretty_name: \"Button HTML\",\r\n            default: '<button class=\"jspsych-btn\">%choice%</button>',\r\n            array: true,\r\n        },\r\n        /** Any content here will be displayed under the button(s). */\r\n        prompt: {\r\n            type: ParameterType.HTML_STRING,\r\n            pretty_name: \"Prompt\",\r\n            default: null,\r\n        },\r\n        /** How long to show the stimulus. */\r\n        stimulus_duration: {\r\n            type: ParameterType.INT,\r\n            pretty_name: \"Stimulus duration\",\r\n            default: null,\r\n        },\r\n        /** How long to show the trial. */\r\n        trial_duration: {\r\n            type: ParameterType.INT,\r\n            pretty_name: \"Trial duration\",\r\n            default: null,\r\n        },\r\n        /** The vertical margin of the button. */\r\n        margin_vertical: {\r\n            type: ParameterType.STRING,\r\n            pretty_name: \"Margin vertical\",\r\n            default: \"0px\",\r\n        },\r\n        /** The horizontal margin of the button. */\r\n        margin_horizontal: {\r\n            type: ParameterType.STRING,\r\n            pretty_name: \"Margin horizontal\",\r\n            default: \"8px\",\r\n        },\r\n        /** If true, then trial will end when user responds. */\r\n        response_ends_trial: {\r\n            type: ParameterType.BOOL,\r\n            pretty_name: \"Response ends trial\",\r\n            default: true,\r\n        },\r\n    },\r\n};\r\n/**\r\n * html-multi-response\r\n * jsPsych plugin for displaying an html stimulus and getting a response\r\n * @author Adam Richie-Halford\r\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-multi-response/ html-multi-response plugin documentation on jspsych.org}\r\n */\r\nclass HtmlMultiResponsePlugin {\r\n    constructor(jsPsych) {\r\n        this.jsPsych = jsPsych;\r\n    }\r\n    trial(display_element, trial) {\r\n        // display stimulus\r\n        var html = '<div id=\"jspsych-html-multi-response-stimulus\">' + trial.stimulus + \"</div>\";\r\n        //display buttons\r\n        var buttons = [];\r\n        if (Array.isArray(trial.button_html)) {\r\n            if (trial.button_html.length == trial.button_choices.length) {\r\n                buttons = trial.button_html;\r\n            }\r\n            else {\r\n                console.error(\"Error in html-multi-response plugin. The length of the button_html array does not equal the length of the button_choices array\");\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < trial.button_choices.length; i++) {\r\n                buttons.push(trial.button_html);\r\n            }\r\n        }\r\n        html += '<div id=\"jspsych-html-multi-response-btngroup\">';\r\n        for (var i = 0; i < trial.button_choices.length; i++) {\r\n            var str = buttons[i].replace(/%choice%/g, trial.button_choices[i]);\r\n            html +=\r\n                '<div class=\"jspsych-html-multi-response-button\" style=\"display: inline-block; margin:' +\r\n                    trial.margin_vertical +\r\n                    \" \" +\r\n                    trial.margin_horizontal +\r\n                    '\" id=\"jspsych-html-multi-response-button-' +\r\n                    i +\r\n                    '\" data-choice=\"' +\r\n                    i +\r\n                    '\">' +\r\n                    str +\r\n                    \"</div>\";\r\n        }\r\n        html += \"</div>\";\r\n        //show prompt if there is one\r\n        if (trial.prompt !== null) {\r\n            html += trial.prompt;\r\n        }\r\n        display_element.innerHTML = html;\r\n        // function to handle responses by the subject\r\n        var after_keyboard_response = function (info) {\r\n            // after a valid response, the stimulus will have the CSS class 'responded'\r\n            // which can be used to provide visual feedback that a response was recorded\r\n            display_element.querySelector(\"#jspsych-html-multi-response-stimulus\").className +=\r\n                \" responded\";\r\n            // only record the first response\r\n            if (response.key == null) {\r\n                response = Object.assign({ source: \"keyboard\", button: null }, info);\r\n            }\r\n            if (trial.response_ends_trial) {\r\n                end_trial();\r\n            }\r\n        };\r\n        // Add event listener for keys\r\n        if (trial.keyboard_choices != \"NO_KEYS\") {\r\n            var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\r\n                callback_function: after_keyboard_response,\r\n                valid_responses: trial.keyboard_choices,\r\n                rt_method: \"performance\",\r\n                persist: false,\r\n                allow_held_key: false,\r\n            });\r\n        }\r\n        // start time\r\n        var start_time = performance.now();\r\n        // add event listeners to buttons\r\n        for (var i = 0; i < trial.button_choices.length; i++) {\r\n            display_element\r\n                .querySelector(\"#jspsych-html-multi-response-button-\" + i)\r\n                .addEventListener(\"click\", (e) => {\r\n                var btn_el = e.currentTarget;\r\n                var choice = btn_el.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\r\n                after_response(choice);\r\n            });\r\n        }\r\n        // store response\r\n        var response = {\r\n            rt: null,\r\n            button: null,\r\n            key: null,\r\n            source: null,\r\n        };\r\n        // function to end trial when it is time\r\n        const end_trial = () => {\r\n            // kill any remaining setTimeout handlers\r\n            this.jsPsych.pluginAPI.clearAllTimeouts();\r\n            // kill keyboard listeners\r\n            if (typeof keyboardListener !== \"undefined\") {\r\n                this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n            }\r\n            // gather the data to store for the trial\r\n            var trial_data = {\r\n                rt: response.rt,\r\n                stimulus: trial.stimulus,\r\n                button_response: response.button,\r\n                keyboard_response: response.key,\r\n                response_source: response.source,\r\n            };\r\n            // clear the display\r\n            display_element.innerHTML = \"\";\r\n            // move on to the next trial\r\n            this.jsPsych.finishTrial(trial_data);\r\n        };\r\n        // function to handle responses by the subject\r\n        function after_response(choice) {\r\n            // measure rt\r\n            var end_time = performance.now();\r\n            var rt = Math.round(end_time - start_time);\r\n            response.button = parseInt(choice);\r\n            response.rt = rt;\r\n            response.source = \"button\";\r\n            // after a valid response, the stimulus will have the CSS class 'responded'\r\n            // which can be used to provide visual feedback that a response was recorded\r\n            display_element.querySelector(\"#jspsych-html-multi-response-stimulus\").className +=\r\n                \" responded\";\r\n            // disable all the buttons after a response\r\n            var btns = document.querySelectorAll(\".jspsych-html-multi-response-button button\");\r\n            for (var i = 0; i < btns.length; i++) {\r\n                //btns[i].removeEventListener('click');\r\n                btns[i].setAttribute(\"disabled\", \"disabled\");\r\n            }\r\n            if (trial.response_ends_trial) {\r\n                end_trial();\r\n            }\r\n        }\r\n        // hide image if timing is set\r\n        if (trial.stimulus_duration !== null) {\r\n            this.jsPsych.pluginAPI.setTimeout(() => {\r\n                display_element.querySelector(\"#jspsych-html-multi-response-stimulus\").style.visibility = \"hidden\";\r\n            }, trial.stimulus_duration);\r\n        }\r\n        // end trial if time limit is set\r\n        if (trial.trial_duration !== null) {\r\n            this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\r\n        }\r\n    }\r\n    simulate(trial, simulation_mode, simulation_options, load_callback) {\r\n        if (simulation_mode == \"data-only\") {\r\n            load_callback();\r\n            this.simulate_data_only(trial, simulation_options);\r\n        }\r\n        if (simulation_mode == \"visual\") {\r\n            this.simulate_visual(trial, simulation_options, load_callback);\r\n        }\r\n    }\r\n    create_simulation_data(trial, simulation_options) {\r\n        const keyboard_data = {\r\n            stimulus: trial.stimulus,\r\n            rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\r\n            keyboard_response: this.jsPsych.pluginAPI.getValidKey(trial.keyboard_choices),\r\n            button_response: null,\r\n            response_source: \"keyboard\",\r\n        };\r\n        const button_data = {\r\n            stimulus: trial.stimulus,\r\n            rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\r\n            button_response: this.jsPsych.randomization.randomInt(0, trial.button_choices.length - 1),\r\n            keyboard_response: null,\r\n            response_source: \"button\",\r\n        };\r\n        const default_data = Math.random() < 0.5 ? keyboard_data : button_data;\r\n        const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\r\n        this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\r\n        return data;\r\n    }\r\n    simulate_data_only(trial, simulation_options) {\r\n        const data = this.create_simulation_data(trial, simulation_options);\r\n        this.jsPsych.finishTrial(data);\r\n    }\r\n    simulate_visual(trial, simulation_options, load_callback) {\r\n        const data = this.create_simulation_data(trial, simulation_options);\r\n        const display_element = this.jsPsych.getDisplayElement();\r\n        this.trial(display_element, trial);\r\n        load_callback();\r\n        if (data.rt !== null) {\r\n            if (data.button_response !== null) {\r\n                this.jsPsych.pluginAPI.clickTarget(display_element.querySelector(`div[data-choice=\"${data.button_response}\"] button`), data.rt);\r\n            }\r\n            else {\r\n                this.jsPsych.pluginAPI.pressKey(data.keyboard_response, data.rt);\r\n            }\r\n        }\r\n    }\r\n}\r\nHtmlMultiResponsePlugin.info = info;\n\nexport { HtmlMultiResponsePlugin as default };\n//# sourceMappingURL=index.js.map\n"],"names":["info","name","parameters","stimulus","type","HTML_STRING","pretty_name","default","undefined","button_choices","STRING","array","keyboard_choices","KEYS","button_html","prompt","prompt_above_buttons","BOOL","trial_duration","INT","margin_vertical","margin_horizontal","response_ends_trial","trial_ends_after_audio","response_allowed_while_playing","AudioMultiResponsePlugin","constructor","jsPsych","this","trial","display_element","on_load","trial_complete","context","pluginAPI","audioContext","response","rt","key","button","source","startTime","getAudioBuffer","then","buffer","audio","createBufferSource","connect","destination","currentTime","setupTrial","catch","err","console","error","addEventListener","end_trial","setup_keyboard_listener","enable_buttons","buttons","Array","isArray","length","i","push","html","str","replace","innerHTML","disable_buttons","performance","now","start","play","setTimeout","clearAllTimeouts","stop","pause","removeEventListener","cancelAllKeyboardResponses","trial_data","keyboard_response","button_response","response_source","finishTrial","e","choice","endTime","currentTarget","getAttribute","Math","round","parseInt","btns","document","querySelectorAll","btn_el","querySelector","disabled","after_keyboard_response","Object","assign","responseArgs","rt_method","audio_context","audio_context_start_time","getKeyboardResponse","callback_function","valid_responses","persist","allow_held_key","Promise","resolve","simulate","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","create_simulation_data","keyboard_data","randomization","sampleExGaussian","getValidKey","button_data","randomInt","default_data","random","data","mergeSimulationData","ensureSimulationDataConsistency","getDisplayElement","respond","clickTarget","pressKey","sequence","blocks","COMPLEX","y","x","nested","block_size","display_width","display_height","mode","options","sequence_gap_duration","sequence_block_duration","pre_stim_duration","response_animation_duration","block_color","highlight_color","correct_color","incorrect_color","CorsiBlocksPlugin","start_time","correct","wait","fn","t","_wait_help","s","window","requestAnimationFrame","sequence_location","display_phase","update_display","block","style","backgroundColor","correct_animation","offset","incorrect_animation","animation_timing","duration","iterations","register_click","id","animate","target","stimulus_duration","HtmlMultiResponsePlugin","keyboardListener","className","after_response","cancelKeyboardResponse","end_time","setAttribute","visibility"],"sourceRoot":""}